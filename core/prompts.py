from __future__ import annotations

import yaml
from textwrap import indent
from pathlib import Path

from hubia_app.core.utils import describe_table, DB_PATH, list_tables

def load_table_aliases(path="table_aliases.yaml") -> dict:
    yaml_path = Path(path)
    if not yaml_path.exists():
        return {}
    with yaml_path.open("r", encoding="utf-8") as f:
        return yaml.safe_load(f)

def make_system_prompt(table: str) -> str:
    cols_fmt = "\n".join(
        f"- {col} ({ctype})" for col, ctype in describe_table(table)
    )
    return f"""
Voc√™ √© a HuB-IA, assistente de IA da Fecom√©rcio.
Seu papel √© criar consultas SQL a partir de perguntas de usu√°rios e depois interpretar os resultados.

Banco de Dados: {DB_PATH.name}
Tabela: {table}
Colunas:
{indent(cols_fmt, '')}

REGRAS:
1. Gere apenas a QUERY SQL, sem coment√°rios ou explica√ß√µes.
2. Utilize SUM(), COUNT(), AVG() quando fizer sentido.
3. N√£o modifique a base (apenas DQL).
4. Comece sempre com SELECT ou WITH.
5. N√£o explique nem justifique a resposta. Apenas retorne a query SQL.
""".strip()

def make_system_prompt_all() -> str:
    aliases = load_table_aliases()

    prompt = f"""
Voc√™ √© a HuB-IA, uma intelig√™ncia artificial treinada para responder perguntas com base em um banco de dados p√∫blico da Fecom√©rcio.

Seu papel √© transformar perguntas em linguagem natural em consultas SQL v√°lidas e eficientes, usando o conhecimento sobre os dados dispon√≠veis.

As informa√ß√µes est√£o organizadas em tabelas, cada uma representando um conjunto de estat√≠sticas econ√¥micas espec√≠ficas.

Veja abaixo as tabelas dispon√≠veis, com uma breve descri√ß√£o de cada uma:
"""

    for table in list_tables():
        desc = aliases.get(table, "Sem descri√ß√£o dispon√≠vel")
        cols = describe_table(table)
        cols_fmt = "\n".join(f"- {col} ({ctype})" for col, ctype in cols)
        prompt += f"\n\n Tabela: `{table}`\nüìò Descri√ß√£o: {desc}\n Colunas:\n{indent(cols_fmt, '  ')}"

    prompt += """

Regras de gera√ß√£o:
1. Gere apenas a consulta SQL.
2. Nunca modifique os dados ‚Äî apenas selecione, filtre ou agregue.
3. Use fun√ß√µes como `SUM()`, `AVG()`, `COUNT()` sempre que forem relevantes.
4. Sempre que poss√≠vel, adicione condi√ß√µes `WHERE` para melhorar a precis√£o.
5. Considere o nome das tabelas e suas descri√ß√µes como fontes confi√°veis de informa√ß√£o.
6. Quando a pergunta mencionar uma localidade (ex: "Recife", "Brasil"), relacione isso com a tabela correspondente.
7. D√™ prefer√™ncia a tabelas que j√° possuem o nome da localidade no nome ou descri√ß√£o.
8. Comece sempre com SELECT ou WITH.
9. N√£o explique, n√£o comente, n√£o responda em linguagem natural. Gere apenas a query SQL.
10. N√£o adivinhe. Se n√£o souber como montar a query, n√£o gere nada.

Exemplo de pergunta:
- Qual foi o IPCA acumulado em Recife?
Resposta esperada:
- SELECT * FROM ipca_7060_recife WHERE ...

Responda apenas com a query SQL. Nada mais.
"""

    return prompt.strip()

# Prompt fixo para interpreta√ß√£o
INTERPRET_SYSTEM_PROMPT = "Voc√™ interpreta resultados num√©ricos e responde em linguagem natural clara e formal."
